# Generated by Django 3.1 on 2020-08-26 15:54

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.helpers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='uuid')),
                ('last_activity', models.DateTimeField(blank=True, default=django.utils.timezone.now, verbose_name='Активность')),
                ('phone', models.CharField(max_length=17, unique=True, verbose_name='Телефон')),
                ('perm', models.CharField(choices=[('DE', 'Удален'), ('BL', 'Заблокирован'), ('CH', 'Ребенок'), ('PV', 'Телефон не подтвержден'), ('ST', 'Обычные права'), ('VS', 'Запрос на проверку'), ('VE', 'Проверенный'), ('IS', 'Запрос на идентификацию'), ('ID', 'Идентифицированный'), ('MA', 'Менеджер'), ('SM', 'Суперменеджер')], default='PV', max_length=5, verbose_name='Уровень доступа')),
                ('gender', models.CharField(blank=True, choices=[('Man', 'Мужской'), ('Fem', 'Женский'), ('Unc', 'Неизвестно')], max_length=5, verbose_name='Пол')),
                ('birthday', models.DateField(blank=True, default=django.utils.timezone.now, verbose_name='День рождения')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserFeaturedFriend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('featured_user', models.PositiveIntegerField(default=0, verbose_name='Рекомендуемый друг')),
            ],
            options={
                'verbose_name': 'Рекомендованные друзья',
                'verbose_name_plural': 'Рекомендованные друзья',
            },
        ),
        migrations.CreateModel(
            name='UserPopulateCommunity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('community', models.PositiveIntegerField(default=0, verbose_name='Сообщество')),
                ('count', models.PositiveIntegerField(default=0, verbose_name='Количество визитов')),
            ],
            options={
                'verbose_name': 'Популярность сообществ',
                'verbose_name_plural': 'Популярность сообществ',
                'ordering': ['-count'],
            },
        ),
        migrations.CreateModel(
            name='UserPopulateFriend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.PositiveIntegerField(default=0, verbose_name='Пользователь')),
                ('friend', models.PositiveIntegerField(default=0, verbose_name='Друг')),
                ('count', models.PositiveIntegerField(default=0, verbose_name='Количество визитов')),
            ],
            options={
                'verbose_name': 'Популярность друзей',
                'verbose_name_plural': 'Популярность друзей',
                'ordering': ['-count'],
            },
        ),
        migrations.CreateModel(
            name='UserProfileFamily',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('male_status', models.CharField(choices=[('NV', 'Не выбрано'), ('NM', 'Не женат'), ('MF', 'Есть подруга'), ('EN', 'Помолвлен'), ('MA', 'Женат'), ('CM', 'В гражданском браке'), ('LO', 'Влюблён'), ('DI', 'Всё сложно'), ('AS', 'В активном поиске')], default='NV', max_length=5, verbose_name='Статус мужчины')),
                ('female_status', models.CharField(choices=[('NV', 'Не выбрано'), ('NM', 'Не замужем'), ('MF', 'Есть друг'), ('EN', 'Помолвлена'), ('MA', 'Замужем'), ('CM', 'В гражданском браке'), ('LO', 'Влюблёна'), ('DI', 'Всё сложно'), ('AS', 'В активном поиске')], default='NV', max_length=5, verbose_name='Статус женщины')),
                ('brother_sister', models.ManyToManyField(blank=True, related_name='user_profile_bro', to=settings.AUTH_USER_MODEL, verbose_name='Братья, сёстры')),
                ('children', models.ManyToManyField(blank=True, related_name='user_profile_chilren', to=settings.AUTH_USER_MODEL, verbose_name='Дети')),
                ('dad', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_profile_dad', to=settings.AUTH_USER_MODEL, verbose_name='Папа')),
                ('grandsons', models.ManyToManyField(blank=True, related_name='user_profile_grandsons', to=settings.AUTH_USER_MODEL, verbose_name='Внуки')),
                ('mom', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_profile_mom', to=settings.AUTH_USER_MODEL, verbose_name='Мама')),
                ('partner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_profile_partner', to=settings.AUTH_USER_MODEL, verbose_name='Муж/Жена')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_family', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Семья пользователя',
                'verbose_name_plural': 'Семьи пользователей',
            },
        ),
        migrations.CreateModel(
            name='UserProfileAnketa',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('political_preferences', models.CharField(blank=True, choices=[('Не выбраны', 'Не выбраны'), ('Индиффирентные', 'Индиффирентные'), ('Коммунистические', 'Коммунистические'), ('Социалистические', 'Социалистические'), ('Умеренные', 'Умеренные'), ('Либеральные', 'Либеральные'), ('Консервативные', 'Консервативные'), ('Либералистические', 'Либералистические'), ('Ультраконсервативные', 'Ультраконсервативные')], max_length=50, verbose_name='Полит. предпочтения')),
                ('worldview', models.CharField(blank=True, choices=[('Не выбрано', 'Не выбрано'), ('Иудаизм', 'Иудаизм'), ('Православие', 'Православие'), ('Католицизм', 'Католицизм'), ('Протестантизм', 'Протестантизм'), ('Ислам', 'Ислам'), ('Буддизм', 'Буддизм'), ('Конфуцианство', 'Конфуцианство'), ('Светский гуманизм', 'Светский гуманизм'), ('Пастафарианство', 'Пастафарианство')], max_length=50, verbose_name='Мировоззрение')),
                ('mainthing_in_life', models.CharField(blank=True, choices=[('Не выбрано', 'Не выбрано'), ('Семья и дети', 'Семья и дети'), ('Карьера и деньги', 'Карьера и деньги'), ('Развлечение и отдых', 'Развлечение и отдых'), ('Наука и исследования', 'Наука и исследования'), ('Совершенствование мира', 'Совершенствование мира'), ('Саморазвитие', 'Саморазвитие'), ('Красота и искусство', 'Красота и искусство'), ('Слава и влияние', 'Слава и влияние')], max_length=50, verbose_name='Главное в жизни')),
                ('mainthing_in_people', models.CharField(blank=True, choices=[('Не выбрано', 'Не выбрано'), ('Ум и креативность', 'Ум и креативность'), ('Доброта и честность', 'Доброта и честность'), ('Красота и здоровье', 'Красота и здоровье'), ('Власть и богатство', 'Власть и богатство'), ('Смелость и упорство', 'Смелость и упорство'), ('Юмор и жизнелюбие', 'Юмор и жизнелюбие')], max_length=50, verbose_name='Главное в людях')),
                ('attitude_to_smoking', models.CharField(blank=True, choices=[('Не выбрано', 'Не выбрано'), ('Резко негативное', 'Резко негативное'), ('Негативное', 'ДНегативное'), ('Компромиссное', 'Компромиссное'), ('Помогу бросить курить', 'Помогу бросить курить')], max_length=50, verbose_name='Отношение к курению')),
                ('attitude_to_alcohol', models.CharField(blank=True, choices=[('Не выбрано', 'Не выбрано'), ('Резко негативное', 'Резко негативное'), ('Негативное', 'ДНегативное'), ('Компромиссное', 'Компромиссное'), ('Помогу бросить пить', 'Помогу бросить пить')], max_length=50, verbose_name='Отношение к алкоголю')),
                ('inspiration', models.CharField(max_length=200, verbose_name='Что меня вдохновляет')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_profile_anketa', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Анкета',
                'verbose_name_plural': 'Анкеты',
            },
        ),
        migrations.CreateModel(
            name='UserPrivateVideo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='Y', max_length=5, verbose_name='Кто добавляет видеозаписи')),
                ('see', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='AC', max_length=5, verbose_name='Кто видит видеозаписи')),
                ('comment', models.CharField(choices=[('CY', 'Комментарии пишете Вы'), ('CF', 'Комментарии пишут друзья'), ('CA', 'Комментарии пишут все')], default='CA', max_length=5, verbose_name='Комментарии')),
                ('votes', models.BooleanField(default=True, verbose_name='Реакции')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_private_video', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='UserPrivatePost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wall', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='Y', max_length=5, verbose_name='Кто добавляет записи')),
                ('see', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='AC', max_length=5, verbose_name='Кто видит стену')),
                ('comment', models.CharField(choices=[('CY', 'Комментарии пишете Вы'), ('CF', 'Комментарии пишут друзья'), ('CA', 'Комментарии пишут все')], default='CA', max_length=5, verbose_name='Комментарии')),
                ('votes', models.BooleanField(default=True, verbose_name='Реакции')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_private_post', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='UserPrivatePhoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='Y', max_length=5, verbose_name='Кто добавляет фотографии')),
                ('see', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='AC', max_length=5, verbose_name='Кто видит фотографии')),
                ('comment', models.CharField(choices=[('CY', 'Комментарии пишете Вы'), ('CF', 'Комментарии пишут друзья'), ('CA', 'Комментарии пишут все')], default='CA', max_length=5, verbose_name='Комментарии')),
                ('votes', models.BooleanField(default=True, verbose_name='Реакции')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_private_photo', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='UserPrivateMusic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('music', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='Y', max_length=5, verbose_name='Кто добавляет аудиозаписи')),
                ('see', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='AC', max_length=5, verbose_name='Кто видит видеозаписи')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_private_music', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='UserPrivateGood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('good', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='Y', max_length=5, verbose_name='Кто добавляет товары')),
                ('see', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='AC', max_length=5, verbose_name='Кто видит товары')),
                ('comment', models.CharField(choices=[('CY', 'Комментарии пишете Вы'), ('CF', 'Комментарии пишут друзья'), ('CA', 'Комментарии пишут все')], default='CA', max_length=5, verbose_name='Комментарии')),
                ('votes', models.BooleanField(default=True, verbose_name='Реакции')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_private_good', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='UserPrivate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('community', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='AC', max_length=5, verbose_name='Кто видит сообщества')),
                ('friends', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='AC', max_length=5, verbose_name='Кто видит друзей')),
                ('message', models.CharField(choices=[('AC', 'Все пользователи'), ('F', 'Друзья'), ('EO', 'Друзья и друзья друзей'), ('Y', 'Только я'), ('AB', 'Все, кроме'), ('SF', 'Некоторые друзья')], default='AC', max_length=5, verbose_name='Кто пишет сообщения')),
                ('is_private', models.BooleanField(default=False, verbose_name='Закрытый профиль')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_private', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotificationsVideo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.BooleanField(default=True, verbose_name='Комментарий к видео')),
                ('comment_reply', models.BooleanField(default=True, verbose_name='Ответ на комментарий к видео')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост видео')),
                ('like', models.BooleanField(default=True, verbose_name='Лайк к видео')),
                ('dislike', models.BooleanField(default=True, verbose_name='Дизлайк к видео')),
                ('comment_like', models.BooleanField(default=True, verbose_name='Лайках на комментарий к видео')),
                ('comment_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на комментарий к видео')),
                ('comment_reply_like', models.BooleanField(default=True, verbose_name='Лайк на ответ к комментарию')),
                ('comment_reply_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на ответ к комментарию')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_video_notify', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotificationsPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.BooleanField(default=True, verbose_name='Комментарий к записи')),
                ('comment_reply', models.BooleanField(default=True, verbose_name='Ответ на комментарий к записи')),
                ('mention', models.BooleanField(default=True, verbose_name='Упоминание в записи')),
                ('comment_mention', models.BooleanField(default=True, verbose_name='Упоминание в комментарии к записи')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост записи')),
                ('like', models.BooleanField(default=True, verbose_name='Лайк к записи')),
                ('dislike', models.BooleanField(default=True, verbose_name='Дизлайк к записи')),
                ('comment_like', models.BooleanField(default=True, verbose_name='Лайк на комментарий к записи')),
                ('comment_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на комментарий к записи')),
                ('comment_reply_like', models.BooleanField(default=True, verbose_name='Лайк на ответ к комментарию')),
                ('comment_reply_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на ответ к комментарию')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_post_notify', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotificationsPhoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.BooleanField(default=True, verbose_name='Комментарий к фото')),
                ('comment_reply', models.BooleanField(default=True, verbose_name='Ответ на комментарий к фото')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост фото')),
                ('like', models.BooleanField(default=True, verbose_name='Лайк к фото')),
                ('dislike', models.BooleanField(default=True, verbose_name='Дизлайк к фото')),
                ('comment_like', models.BooleanField(default=True, verbose_name='Лайк на комментарий к фото')),
                ('comment_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на комментарий к фото')),
                ('comment_reply_like', models.BooleanField(default=True, verbose_name='Лайк на ответ к комментарию')),
                ('comment_reply_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на ответ к комментарию')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_photo_notify', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotificationsMusic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост аудиозаписи')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_music_notify', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotificationsGood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.BooleanField(default=True, verbose_name='Комментарий к товару')),
                ('comment_reply', models.BooleanField(default=True, verbose_name='Ответ на комментарий к товару')),
                ('repost', models.BooleanField(default=True, verbose_name='Репост товара')),
                ('like', models.BooleanField(default=True, verbose_name='Лайк к товару')),
                ('dislike', models.BooleanField(default=True, verbose_name='Дизлайк к товару')),
                ('comment_like', models.BooleanField(default=True, verbose_name='Лайк на комментарий к товару')),
                ('comment_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на комментарий к товару')),
                ('comment_reply_like', models.BooleanField(default=True, verbose_name='Лайк на ответ к комментарию')),
                ('comment_reply_dislike', models.BooleanField(default=True, verbose_name='Дизлайк на ответ к комментарию')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_good_notify', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotifications',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connection_request', models.BooleanField(default=True, verbose_name='Заявка в друзья')),
                ('connection_confirmed', models.BooleanField(default=True, verbose_name='Заявка принята')),
                ('community_invite', models.BooleanField(default=True, verbose_name='Приглашение в сообщество')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_notify', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='UserColorSettings',
            fields=[
                ('color', models.CharField(choices=[('white', 'white'), ('blue', 'blue'), ('brown', 'brown'), ('dark-blue', 'dark-blue'), ('dark-brown', 'dark-brown'), ('dark-green', 'dark-green'), ('dark-grey', 'dark-grey'), ('dark-maroon', 'dark-maroon'), ('dark-pink', 'dark-pink'), ('dark-purple', 'dark-purple'), ('grey', 'grey'), ('orange', 'orange'), ('purple', 'purple'), ('red', 'red'), ('skyblue', 'skyblue'), ('teal', 'teal')], default='white', max_length=20, verbose_name='Цвет')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='color_settings', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='UserBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blocked_user', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='blocked_by_users', to=settings.AUTH_USER_MODEL, verbose_name='Кого блокирует')),
                ('blocker', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='user_blocks', to=settings.AUTH_USER_MODEL, verbose_name='Кто блокирует')),
            ],
        ),
        migrations.CreateModel(
            name='TwoUserLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_ru', models.CharField(blank=True, max_length=100, verbose_name='Город по-русски')),
                ('city_en', models.CharField(blank=True, max_length=100, verbose_name='Город по-английски')),
                ('city_lat', models.FloatField(blank=True, verbose_name='Ширина города')),
                ('city_lon', models.FloatField(blank=True, verbose_name='Долгота города')),
                ('region_ru', models.CharField(blank=True, max_length=100, verbose_name='Регион по-русски')),
                ('region_en', models.CharField(blank=True, max_length=100, verbose_name='Регион по-английски')),
                ('country_ru', models.CharField(blank=True, max_length=100, verbose_name='Страна по-русски')),
                ('country_en', models.CharField(blank=True, max_length=100, verbose_name='Страна по-английски')),
                ('phone', models.CharField(blank=True, max_length=5, verbose_name='Начало номера')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_location_2', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Местоположение 2',
                'verbose_name_plural': 'Местоположения 2',
            },
        ),
        migrations.CreateModel(
            name='ThreeUserLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_ru', models.CharField(blank=True, max_length=100, verbose_name='Город по-русски')),
                ('city_en', models.CharField(blank=True, max_length=100, verbose_name='Город по-английски')),
                ('city_lat', models.FloatField(blank=True, verbose_name='Ширина города')),
                ('city_lon', models.FloatField(blank=True, verbose_name='Долгота города')),
                ('region_ru', models.CharField(blank=True, max_length=100, verbose_name='Регион по-русски')),
                ('region_en', models.CharField(blank=True, max_length=100, verbose_name='Регион по-английски')),
                ('country_ru', models.CharField(blank=True, max_length=100, verbose_name='Страна по-русски')),
                ('country_en', models.CharField(blank=True, max_length=100, verbose_name='Страна по-английски')),
                ('phone', models.CharField(blank=True, max_length=5, verbose_name='Начало номера')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_location_3', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Местоположение 3',
                'verbose_name_plural': 'Местоположения 3',
            },
        ),
        migrations.CreateModel(
            name='OneUserLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_ru', models.CharField(blank=True, max_length=100, verbose_name='Город по-русски')),
                ('city_en', models.CharField(blank=True, max_length=100, verbose_name='Город по-английски')),
                ('city_lat', models.FloatField(blank=True, verbose_name='Ширина города')),
                ('city_lon', models.FloatField(blank=True, verbose_name='Долгота города')),
                ('region_ru', models.CharField(blank=True, max_length=100, verbose_name='Регион по-русски')),
                ('region_en', models.CharField(blank=True, max_length=100, verbose_name='Регион по-английски')),
                ('country_ru', models.CharField(blank=True, max_length=100, verbose_name='Страна по-русски')),
                ('country_en', models.CharField(blank=True, max_length=100, verbose_name='Страна по-английски')),
                ('phone', models.CharField(blank=True, max_length=5, verbose_name='Начало номера')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_location', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Местоположение 1',
                'verbose_name_plural': 'Местоположения 1',
            },
        ),
        migrations.CreateModel(
            name='IPUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_1', models.GenericIPAddressField(blank=True, null=True, verbose_name='ip 1')),
                ('ip_2', models.GenericIPAddressField(blank=True, null=True, verbose_name='ip 2')),
                ('ip_3', models.GenericIPAddressField(blank=True, null=True, verbose_name='ip 3')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_ip', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'ip пользователя',
                'verbose_name_plural': 'ip пользователей',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('b_avatar', models.ImageField(blank=True, upload_to=users.helpers.upload_to_user_directory)),
                ('s_avatar', models.ImageField(blank=True, upload_to=users.helpers.upload_to_user_directory)),
                ('sity', models.CharField(blank=True, max_length=64, verbose_name='Местоположение')),
                ('status', models.CharField(blank=True, max_length=100, verbose_name='статус-слоган')),
                ('activity', models.TextField(blank=True, max_length=5000, verbose_name='Деятельность')),
                ('interests', models.TextField(blank=True, max_length=5000, verbose_name='Интересы')),
                ('favorite_music', models.TextField(blank=True, max_length=5000, verbose_name='Любимая музыка')),
                ('favorite_films', models.TextField(blank=True, max_length=5000, verbose_name='Любимые фильмы')),
                ('favorite_books', models.TextField(blank=True, max_length=5000, verbose_name='Любимые книги')),
                ('favorite_game', models.TextField(blank=True, max_length=5000, verbose_name='Любимые игры')),
                ('favorite_quotes', models.TextField(blank=True, max_length=5000, verbose_name='Любимые цитаты')),
                ('about', models.TextField(blank=True, max_length=5000, verbose_name='О себе')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Профили пользователей',
                'index_together': {('id', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='userblock',
            index=models.Index(fields=['blocked_user', 'blocker'], name='users_userb_blocked_ab1a4e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userblock',
            unique_together={('blocked_user', 'blocker')},
        ),
        migrations.AlterIndexTogether(
            name='twouserlocation',
            index_together={('id', 'user')},
        ),
        migrations.AlterIndexTogether(
            name='threeuserlocation',
            index_together={('id', 'user')},
        ),
        migrations.AlterIndexTogether(
            name='oneuserlocation',
            index_together={('id', 'user')},
        ),
        migrations.AlterIndexTogether(
            name='ipuser',
            index_together={('id', 'user')},
        ),
    ]
