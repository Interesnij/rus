# Generated by Django 2.2.5 on 2019-11-30 13:21

import communities.helpers
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import imagekit.models.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('main', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.CharField(max_length=500, null=True, verbose_name='Описание')),
                ('rules', models.TextField(max_length=1000, null=True, verbose_name='Правила')),
                ('cover', imagekit.models.fields.ProcessedImageField(null=True, upload_to=communities.helpers.upload_to_community_avatar_directory)),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Создано')),
                ('status', models.CharField(blank=True, max_length=100, null=True, verbose_name='статус-слоган')),
                ('type', models.CharField(choices=[('P', 'Публичное'), ('T', 'Приватное'), ('C', 'Закрытое')], default='P', max_length=2)),
                ('invites_enabled', models.BooleanField(default=True, verbose_name='Разрешить приглашения')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Удаленное')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='uuid')),
                ('banned_users', models.ManyToManyField(related_name='banned_of_communities', to=settings.AUTH_USER_MODEL, verbose_name='Черный список')),
            ],
            options={
                'verbose_name_plural': 'сообщества',
                'verbose_name': 'сообщество',
            },
        ),
        migrations.CreateModel(
            name='CommunityCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('avatar', models.ImageField(null=True, upload_to='', verbose_name='Аватар')),
                ('order', models.IntegerField(default=0, verbose_name='Номер')),
            ],
            options={
                'verbose_name_plural': 'Категории сообществ',
                'verbose_name': 'Категория сообществ',
            },
        ),
        migrations.CreateModel(
            name='CommunityNotificationsSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_notifications', models.BooleanField(default=True, verbose_name='Отправлять уведомления о комментариях к записям')),
                ('react_notifications', models.BooleanField(default=True, verbose_name='Отправлять уведомления о реакциях к записи')),
                ('comment_reply_notifications', models.BooleanField(default=True, verbose_name='Отправлять уведомления об ответах на комментарии к записям')),
                ('comment_reply_react_notifications', models.BooleanField(default=True, verbose_name='Отправлять уведомления реакциях на ответы к комментариям')),
                ('comment_react_notifications', models.BooleanField(default=True, verbose_name='Отправлять уведомления о реакциях на комментарии к записям')),
                ('connection_request_notifications', models.BooleanField(default=True, verbose_name='Отправлять уведомления о заявках в сообщество')),
                ('comment_user_mention_notifications', models.BooleanField(default=True, verbose_name='Отправлять уведомления об упоминаниях в комментариях к записям')),
                ('user_mention_notifications', models.BooleanField(default=True, verbose_name='Отправлять уведомления об упоминаниях в записям')),
                ('repost_notifications', models.BooleanField(default=True, verbose_name='Отправлять уведомления о репостах записей')),
            ],
        ),
        migrations.CreateModel(
            name='CommunityPrivateSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo_visible_all', models.BooleanField(default=True, verbose_name='Фото сообщества видны всем')),
                ('photo_visible_member', models.BooleanField(default=True, verbose_name='Фото сообщества видны подписчикам')),
                ('can_comments', models.BooleanField(default=True, verbose_name='Все могут оставлять комментарии все пользователи')),
                ('can_add_post', models.BooleanField(default=False, verbose_name='Все могут писать записи на стене')),
                ('can_add_article', models.BooleanField(default=False, verbose_name='Все могут писать статьи на стене')),
                ('can_add_good', models.BooleanField(default=False, verbose_name='Все могут добавлять товары')),
            ],
        ),
        migrations.CreateModel(
            name='CommunitySubCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('avatar', models.ImageField(null=True, upload_to='', verbose_name='Аватар')),
                ('order', models.IntegerField(default=0, verbose_name='Номер')),
                ('sudcategory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='community_categories', to='communities.CommunityCategory', verbose_name='Подкатегория сообщества')),
            ],
            options={
                'verbose_name_plural': 'Подкатегории сообществ',
                'verbose_name': 'Подкатегория сообществ',
            },
        ),
        migrations.CreateModel(
            name='CommunityMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_administrator', models.BooleanField(default=False, verbose_name='Это администратор')),
                ('is_moderator', models.BooleanField(default=False, verbose_name='Это модератор')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Создано')),
                ('community', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='communities.Community', verbose_name='Сообщество')),
                ('user', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='communities_memberships', to=settings.AUTH_USER_MODEL, verbose_name='Члены сообщества')),
            ],
            options={
                'verbose_name_plural': 'подписчики сообщества',
                'verbose_name': 'подписчик сообщества',
            },
        ),
        migrations.CreateModel(
            name='CommunityLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Создан')),
                ('action_type', models.CharField(choices=[('B', 'Заблокировать'), ('U', 'Разблокировать'), ('AM', 'Добавить модератора'), ('RM', 'Удалить модератора'), ('AA', 'Добавить администратора'), ('RA', 'Удалить администратора'), ('OP', 'Открыть пост'), ('CP', 'Закрыть пост'), ('RP', 'Удалить пост'), ('RPC', 'Удалить комментарий к посту'), ('DPC', 'Отключить комментарии'), ('EPC', 'Включить комментарии')], editable=False, max_length=5)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='communities.Community', verbose_name='Сообщество')),
                ('item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='main.Item', verbose_name='Пост')),
                ('source_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Кто модерирует')),
                ('target_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Кого модерируют')),
            ],
        ),
        migrations.CreateModel(
            name='CommunityInvite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('community', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='invites', to='communities.Community', verbose_name='Сообщество')),
                ('creator', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='created_communities_invites', to=settings.AUTH_USER_MODEL, verbose_name='Кто приглашает в сообщество')),
                ('invited_user', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='communities_invites', to=settings.AUTH_USER_MODEL, verbose_name='Кого приглашают в сообщество')),
            ],
            options={
                'verbose_name_plural': 'Приглашения в сообщества',
                'verbose_name': 'Приглашение в сообщество',
            },
        ),
        migrations.AddField(
            model_name='community',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='community_sub_categories', to='communities.CommunitySubCategory', verbose_name='Подкатегория сообщества'),
        ),
        migrations.AddField(
            model_name='community',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_communities', to=settings.AUTH_USER_MODEL, verbose_name='Создатель'),
        ),
        migrations.AddField(
            model_name='community',
            name='starrers',
            field=models.ManyToManyField(related_name='favorite_communities', to=settings.AUTH_USER_MODEL, verbose_name='Подписчики'),
        ),
        migrations.AddIndex(
            model_name='communitymembership',
            index=models.Index(fields=['community', 'user'], name='communities_communi_f9047f_idx'),
        ),
        migrations.AddIndex(
            model_name='communitymembership',
            index=models.Index(fields=['community', 'user', 'is_administrator'], name='communities_communi_b6abad_idx'),
        ),
        migrations.AddIndex(
            model_name='communitymembership',
            index=models.Index(fields=['community', 'user', 'is_moderator'], name='communities_communi_91a862_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='communitymembership',
            unique_together={('user', 'community')},
        ),
        migrations.AlterUniqueTogether(
            name='communityinvite',
            unique_together={('invited_user', 'community', 'creator')},
        ),
    ]
