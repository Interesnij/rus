# Generated by Django 2.2.16 on 2020-09-27 21:38

from django.conf import settings
import django.contrib.postgres.indexes
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SoundGenres',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('order', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'жанры',
                'verbose_name': 'жанр',
            },
        ),
        migrations.CreateModel(
            name='SoundList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('MA', 'Основной плейлист'), ('LI', 'Пользовательский плейлист')], default='LI', max_length=5, verbose_name='Тип листа')),
                ('order', models.PositiveIntegerField(default=0)),
                ('uuid', models.UUIDField(default=uuid.uuid4, verbose_name='uuid')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Удален')),
                ('image', models.CharField(blank=True, max_length=255, null=True)),
                ('creator', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='user_playlist', to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
            ],
            options={
                'verbose_name_plural': 'списки: весь, человека или сообщества',
                'verbose_name': 'список: весь, человека или сообщества',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='SoundSymbol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('order', models.IntegerField(default=0)),
                ('type', models.CharField(choices=[('RS', 'русские исполнители'), ('AS', 'английские исполнители'), ('NS', 'исполнители по цифрам')], default='AS', max_length=5, verbose_name='Язык исполнителя')),
            ],
            options={
                'verbose_name_plural': 'буквы поиска музыки',
                'verbose_name': 'буква поиска музыки',
            },
        ),
        migrations.CreateModel(
            name='SoundTags',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('order', models.IntegerField(default=0)),
                ('symbol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='symbol_papa', to='music.SoundSymbol', verbose_name='Буква')),
            ],
            options={
                'verbose_name_plural': 'теги',
                'verbose_name': 'тег',
            },
        ),
        migrations.CreateModel(
            name='UserTempSoundList',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('genre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='genre_field', to='music.SoundGenres', verbose_name='Связь на жанр')),
                ('list', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='list_field', to='music.SoundList', verbose_name='Связь на плейлист человека или сообщества')),
                ('tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tag_field', to='music.SoundTags', verbose_name='Связь на тег')),
                ('user', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='user_of_field', to=settings.AUTH_USER_MODEL, verbose_name='Слушатель')),
            ],
        ),
        migrations.CreateModel(
            name='SoundcloudParsing',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('artwork_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('duration', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('uri', models.CharField(blank=True, max_length=255, null=True)),
                ('release_year', models.CharField(blank=True, max_length=10, null=True)),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Удален')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='track_genre', to='music.SoundGenres', verbose_name='Жанр трека')),
                ('list', models.ManyToManyField(blank='True', related_name='players', to='music.SoundList')),
                ('tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='track_tag', to='music.SoundTags', verbose_name='Буква')),
            ],
            options={
                'verbose_name_plural': 'спарсенные треки',
                'verbose_name': 'спарсенные треки',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='soundcloudparsing',
            index=django.contrib.postgres.indexes.BrinIndex(fields=['created_at'], name='music_sound_created_c0c921_brin'),
        ),
    ]
